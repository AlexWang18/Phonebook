{"version":3,"sources":["components/PersonForm.js","components/DisplayPersons.js","components/Filter.js","components/Notification.js","services/BookServices.js","index.js"],"names":["Form","props","onSubmit","addPerson","htmlFor","name","value","newName","onChange","handleName","type","newNum","handleNum","Button","id","handleClick","onClick","Person","number","handleDelete","Persons","persons","map","p","_id","Filter","filter","filterHandler","Message","text","className","Error","baseURL","getAll","axios","get","then","response","data","addP","person","post","deleteP","delete","r","replace","put","App","useEffect","BookServices","people","setPersons","useState","setNewName","setNewNum","setFilter","showFilter","setShowed","message","setMessage","error","setError","replacePerson","changedPerson","updatedPerson","console","log","catch","err","setTimeout","filterMatch","RegExp","event","target","preventDefault","some","window","confirm","find","personObj","trim","date","Date","toISOString","addedPerson","concat","alert","match","personTD","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.913ae077.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n/* I tried to declare event handlers inside this seperate class but had difficulty than returning the \r\n//state of the persons back to the App component to render, forced to pass them as props so they can be shared across components\r\n*/\r\n\r\nconst Form = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.addPerson}>\r\n            <div>\r\n                <label htmlFor = \"name\">Name: </label>\r\n                <input name = \"name\" value={props.newName} onChange={props.handleName} />\r\n            </div>\r\n            <div>\r\n                <label htmlFor = \"phone\">Phone number: </label>\r\n                <input name = \"phone\" type = \"tel\" value={props.newNum} onChange={props.handleNum} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport {\r\n    Form\r\n}","\r\nconst Button = ({ id, handleClick }) => {\r\n    return (\r\n        <button onClick={() => handleClick(id)} >delete</button>\r\n    )\r\n}\r\n\r\nconst Person = ({ name, number, id, handleDelete }) => {\r\n    return (\r\n        <li>\r\n            {name} {number} {<Button name={name} id={id} handleClick={handleDelete} />}\r\n        </li>\r\n    )\r\n}\r\n\r\nconst Persons = ({ persons, handleDelete }) => { //Mongo DB holds ID differently in the field of _id\r\n    return (\r\n        <ul>\r\n            {persons.map(p => <Person key={p.id} name={p.name} number={p.number} id={p._id} handleDelete={handleDelete} />)}\r\n        </ul>\r\n    )\r\n}\r\n\r\n//i can export a single component\r\nexport default Persons","import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n        <form>\r\n            Filter results by<input value = {props.filter} onChange = {props.filterHandler} />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Filter;\r\n","import React from 'react'\r\n\r\nconst Message = ({ text }) => {\r\n\r\n    if (text === null) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className='message'>\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Error = ({ text }) => {\r\n    if (text === null) {\r\n        return null;\r\n    }\r\n    \r\n    return (\r\n        <div className='error'>\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Message,\r\n    Error\r\n}","import axios from 'axios'\r\n\r\nconst baseURL = 'http://localhost:3001/api/persons';\r\n\r\nconst getAll = () => {\r\n    return axios\r\n    .get(baseURL)\r\n    .then(response => response.data)\r\n}\r\n\r\nfunction addP(person) {\r\n    return axios\r\n    .post(baseURL, person)\r\n    .then(response => response.data)\r\n}\r\n\r\nconst deleteP = (id) => {\r\n    return axios\r\n    .delete(baseURL+'/'+id)\r\n    .then(r => r.data)\r\n}\r\n\r\nconst replace = (id, person) => {\r\n    return axios\r\n    .put((baseURL+'/'+id), person)\r\n    .then(r => r.data)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    addP,\r\n    deleteP,\r\n    replace\r\n}","import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\n\nimport { Form } from './components/PersonForm'\nimport Persons from './components/DisplayPersons'\nimport Filter from './components/Filter'\nimport { Message, Error } from './components/Notification'\n\nimport BookServices from './services/BookServices'\n\nconst App = () => {\n\n  const hook = () => {\n    BookServices\n      .getAll()\n      .then(people => {\n        setPersons(people)\n        //set the initial state to the response to the get request to the json db.. renders with component\n      })\n  }\n  useEffect(hook, [])\n\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNum, setNewNum] = useState(\"000-000-0000\")\n  const [filter, setFilter] = useState('')\n  const [showFilter, setShowed] = useState(false)\n  const [message, setMessage] = useState(null)\n  const [error, setError] = useState(null)\n\n  const handleNewName = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNewNum = (event) => {\n    setNewNum(event.target.value)\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault();\n\n    if (newName === '') {\n      window.alert('Cannot have a blank name')\n      return;\n    }\n\n    if (persons.some(p => p.name === newName)) {\n\n      const choice = window.confirm(`${newName} is already added to phonebook, replace the old number with the new one?`)\n      if (choice) {\n        const person = persons.find(p => p.name === newName)\n        const changedPerson = { ...person, number: newNum }\n        replacePerson(person._id, changedPerson)\n      }\n      return;\n    }\n    else if (persons.some(p => p.number === newNum)) {\n      setError(\"Cannot have duplicate phone numbers, either update the existing person or change the number \")\n      setTimeout(() => {\n        setError(null)\n      }, 5000)\n    }\n\n    const personObj = {\n      name: newName.trim(),\n      date: new Date().toISOString,\n      number: newNum,\n      //id: persons.length + 1 + Math.floor(newNum / 144) \n    }\n    BookServices\n      .addP(personObj)\n      .then(addedPerson => {\n        setPersons(persons.concat(addedPerson))\n        setNewName('')\n        setMessage('Added ' + addedPerson.name)\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n      }\n      )\n\n  }\n  const replacePerson = (id, changedPerson) => {\n    BookServices\n      .replace(id, changedPerson)\n      .then(updatedPerson => {\n        console.log(updatedPerson)\n        setPersons(persons.map(p => p._id !== id ? p : updatedPerson))\n        setMessage('Updated ' + updatedPerson.name)\n      })\n      .catch(err => {\n        console.log(err)\n        setError(`Cannot update, information of ${changedPerson.name} has already been removed from server `)\n        setTimeout(() => {\n          setError(null)\n        }, 5000) //only show error message for 5 seconds\n        setPersons(persons.filter(p => p.id !== id))\n      })\n  }\n\n  const handleFilter = (event) => {\n    setFilter(event.target.value)\n    setShowed(true)\n  }\n  const filterMatch = new RegExp(filter, 'i')\n\n\n  const handleDelete = (id) => { //need to put updating in main component generally, or else it is rough to update the state\n    const personTD = persons.find(p => p._id === id)\n    console.log(personTD)\n    //only getting first entry\n    if (window.confirm(`Delete ${personTD.name}?`)) {\n      BookServices\n        .deleteP(id)\n        .then(() => {\n          setPersons(persons.filter(p => p !== personTD))\n          setMessage(`Deleted ${personTD.name}`)\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Message text={message} />\n      <Error text={error} />\n      <Filter filter={filter} filterHandler={handleFilter} />\n      <h2>Add a new entry</h2>\n      <Form addPerson={addPerson}\n        handleName={handleNewName} handleNum={handleNewNum}\n        newName={newName} newNum={newNum} />\n\n      <h2>Numbers</h2>\n      <Persons persons={showFilter ?\n        persons.filter(p => p.name.match(filterMatch) || p.number.match(filterMatch))\n        : persons} handleDelete={handleDelete} />\n    </div>\n  )\n}\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}